// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace KnowUrSystem.Test.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DistributionCalculatorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DistributionCalculator.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DistributionCalculator", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DistributionCalculator")))
            {
                KnowUrSystem.Test.Features.DistributionCalculatorFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("連玩N次總和賠錢的機率")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DistributionCalculator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("需求")]
        public virtual void 連玩N次總和賠錢的機率()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("連玩N次總和賠錢的機率", new string[] {
                        "需求"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Count",
                        "RMultiple"});
            table1.AddRow(new string[] {
                        "2",
                        "10"});
            table1.AddRow(new string[] {
                        "1",
                        "-5"});
            table1.AddRow(new string[] {
                        "7",
                        "-1"});
#line 7
 testRunner.Given("我輸入Count vs R mutiple table :", ((string)(null)), table1, "Given ");
#line 12
 testRunner.And("set trades are 120", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("set simulation times are 10000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("set playtime are 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("set simulator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.When("I CalculateDistributionProbability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
 testRunner.Then("the lose equity result should be 50% about +- 0.1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("模擬翻銅板,連玩三次總和賠錢的機率 : 50%")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DistributionCalculator")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("unit")]
        public virtual void 模擬翻銅板連玩三次總和賠錢的機率50()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("模擬翻銅板,連玩三次總和賠錢的機率 : 50%", new string[] {
                        "unit"});
#line 20
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Run",
                        "Number",
                        "RMultiple",
                        "CumulativeRMutiple"});
            table2.AddRow(new string[] {
                        "1",
                        "1",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "1",
                        "2",
                        "1",
                        "2"});
            table2.AddRow(new string[] {
                        "1",
                        "3",
                        "1",
                        "3"});
            table2.AddRow(new string[] {
                        "2",
                        "1",
                        "-1",
                        "-1"});
            table2.AddRow(new string[] {
                        "2",
                        "2",
                        "1",
                        "0"});
            table2.AddRow(new string[] {
                        "2",
                        "3",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "3",
                        "1",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "3",
                        "2",
                        "-1",
                        "0"});
            table2.AddRow(new string[] {
                        "3",
                        "3",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "4",
                        "1",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "4",
                        "2",
                        "1",
                        "2"});
            table2.AddRow(new string[] {
                        "4",
                        "3",
                        "-1",
                        "1"});
            table2.AddRow(new string[] {
                        "5",
                        "1",
                        "-1",
                        "-1"});
            table2.AddRow(new string[] {
                        "5",
                        "2",
                        "-1",
                        "-2"});
            table2.AddRow(new string[] {
                        "5",
                        "3",
                        "1",
                        "-1"});
            table2.AddRow(new string[] {
                        "6",
                        "1",
                        "-1",
                        "-1"});
            table2.AddRow(new string[] {
                        "6",
                        "2",
                        "1",
                        "0"});
            table2.AddRow(new string[] {
                        "6",
                        "3",
                        "-1",
                        "-1"});
            table2.AddRow(new string[] {
                        "7",
                        "1",
                        "1",
                        "1"});
            table2.AddRow(new string[] {
                        "7",
                        "2",
                        "-1",
                        "0"});
            table2.AddRow(new string[] {
                        "7",
                        "3",
                        "-1",
                        "-1"});
            table2.AddRow(new string[] {
                        "8",
                        "1",
                        "-1",
                        "-1"});
            table2.AddRow(new string[] {
                        "8",
                        "2",
                        "-1",
                        "-2"});
            table2.AddRow(new string[] {
                        "8",
                        "3",
                        "-1",
                        "-3"});
#line 21
 testRunner.Given("我輸入fake records table", ((string)(null)), table2, "Given ");
#line 47
 testRunner.And("set calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("set playtime are 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 49
 testRunner.When("I CalculateFakeDistributionProbability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 50
 testRunner.Then("the lose equity result should be 50% about +- 0.1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
